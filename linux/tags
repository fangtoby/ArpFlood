!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ARPHDR	arp_flood.c	/^}__attribute__((packed)) ARPHDR, *PARPHDR;$/;"	t	typeref:struct:_ARPHDR	file:
ARPHDR	prototype_a.c	/^} ARPHDR, *PARPHDR;$/;"	t	typeref:struct:_ARPHDR	file:
ARPHRD	prototype_b.c	170;"	d	file:
ARP_HEADER	prototype_b.c	/^}ARP_HEADER;  $/;"	t	typeref:struct:arphdr	file:
ARP_LEN	Example.c	9;"	d	file:
ARP_PACKET_HANDLE	arp_flood.c	/^}__attribute__((packed))ARP_PACKET_OBJ,*ARP_PACKET_HANDLE;$/;"	t	typeref:struct:_tag_ARP_PACKET	file:
ARP_PACKET_HANDLE	example_01.c	/^}ARP_PACKET_OBJ, *ARP_PACKET_HANDLE; $/;"	t	typeref:struct:_tagARP_PACKET	file:
ARP_PACKET_OBJ	arp_flood.c	/^}__attribute__((packed))ARP_PACKET_OBJ,*ARP_PACKET_HANDLE;$/;"	t	typeref:struct:_tag_ARP_PACKET	file:
ARP_PACKET_OBJ	example_01.c	/^}ARP_PACKET_OBJ, *ARP_PACKET_HANDLE; $/;"	t	typeref:struct:_tagARP_PACKET	file:
BUFLEN	arp_flood.c	20;"	d	file:
DNSHDR	prototype_a.c	/^} DNSHDR, *PDNSHDR;$/;"	t	typeref:struct:_DNSHDR	file:
DNSQUERY	prototype_a.c	/^} DNSQUERY, *PDNSQUERY;$/;"	t	typeref:struct:_DNSQUERY	file:
DNSRESPONSE	prototype_a.c	/^} DNSRESPONSE, *PDNRESPONSE;$/;"	t	typeref:struct:_DNSRESPONSE	file:
ETHDR	prototype_a.c	/^} ETHDR, *PETHDR;$/;"	t	typeref:struct:_ETHDR	file:
ETHERTYPE_ARP	prototype_b.c	82;"	d	file:
ETHERTYPE_IP	prototype_b.c	81;"	d	file:
ETHERTYPE_REVARP	prototype_b.c	83;"	d	file:
ETHER_ADDR_LEN	prototype_b.c	74;"	d	file:
ETH_ALEN	prototype_a.c	20;"	d	file:
ETH_ARP	prototype_b.c	/^}ETH_ARP;  $/;"	t	typeref:struct:ether_arp	file:
ETH_DATA_LEN	prototype_a.c	22;"	d	file:
ETH_FRAME_LEN	prototype_a.c	23;"	d	file:
ETH_HEADER	prototype_b.c	/^}ETH_HEADER;  $/;"	t	typeref:struct:ether_header	file:
ETH_HLEN	prototype_a.c	21;"	d	file:
FAILURE	example_01.c	27;"	d	file:
ICMPHDR	prototype_a.c	/^} ICMPHDR, *PICMPHDR;$/;"	t	typeref:struct:_ICMPHDR	file:
IPHDR	prototype_a.c	/^} IPHDR, *PIPHDR; $/;"	t	typeref:struct:_IPHDR	file:
IPPROTO_ICMP	prototype_a.c	8;"	d	file:
IPPROTO_IP	prototype_a.c	7;"	d	file:
IPPROTO_TCP	prototype_a.c	9;"	d	file:
IPPROTO_UDP	prototype_a.c	10;"	d	file:
IP_HEADER	arp_flood.c	/^} __attribute__((packed))IP_HEADER, *PIP_HEADER ;$/;"	t	typeref:struct:_IP_HEADER	file:
IP_HEADER	prototype_b.c	/^}IP_HEADER;  $/;"	t	typeref:struct:ip	file:
LITTLE_ENDIAN	prototype_b.c	3;"	d	file:
MAC_FRAME_HEADER	arp_flood.c	/^}__attribute__((packed))MAC_FRAME_HEADER,*PMAC_FRAME_HEADER;$/;"	t	typeref:struct:_MAC_FRAME_HEADER	file:
MAC_FRAME_TAIL	arp_flood.c	/^}__attribute__((packed))MAC_FRAME_TAIL, *PMAC_FRAME_TAIL;$/;"	t	typeref:struct:_MAC_FRAME_TAIL	file:
MAXDATA	prototype_b.c	75;"	d	file:
MAX_PACK_SIZE	arp_flood.c	63;"	d	file:
MIN_PACK_SIZE	arp_flood.c	61;"	d	file:
PARPHDR	arp_flood.c	/^}__attribute__((packed)) ARPHDR, *PARPHDR;$/;"	t	typeref:struct:_ARPHDR	file:
PARPHDR	prototype_a.c	/^} ARPHDR, *PARPHDR;$/;"	t	typeref:struct:_ARPHDR	file:
PDNRESPONSE	prototype_a.c	/^} DNSRESPONSE, *PDNRESPONSE;$/;"	t	typeref:struct:_DNSRESPONSE	file:
PDNSHDR	prototype_a.c	/^} DNSHDR, *PDNSHDR;$/;"	t	typeref:struct:_DNSHDR	file:
PDNSQUERY	prototype_a.c	/^} DNSQUERY, *PDNSQUERY;$/;"	t	typeref:struct:_DNSQUERY	file:
PETHDR	prototype_a.c	/^} ETHDR, *PETHDR;$/;"	t	typeref:struct:_ETHDR	file:
PICMPHDR	prototype_a.c	/^} ICMPHDR, *PICMPHDR;$/;"	t	typeref:struct:_ICMPHDR	file:
PIPHDR	prototype_a.c	/^} IPHDR, *PIPHDR; $/;"	t	typeref:struct:_IPHDR	file:
PIP_HEADER	arp_flood.c	/^} __attribute__((packed))IP_HEADER, *PIP_HEADER ;$/;"	t	typeref:struct:_IP_HEADER	file:
PMAC_FRAME_HEADER	arp_flood.c	/^}__attribute__((packed))MAC_FRAME_HEADER,*PMAC_FRAME_HEADER;$/;"	t	typeref:struct:_MAC_FRAME_HEADER	file:
PMAC_FRAME_TAIL	arp_flood.c	/^}__attribute__((packed))MAC_FRAME_TAIL, *PMAC_FRAME_TAIL;$/;"	t	typeref:struct:_MAC_FRAME_TAIL	file:
PORT_DNS	prototype_a.c	15;"	d	file:
PPPOEHDR	prototype_a.c	/^} PPPOEHDR, *PPPPOEHDR;$/;"	t	typeref:struct:_PPPOEHDR	file:
PPPPOEHDR	prototype_a.c	/^} PPPOEHDR, *PPPPOEHDR;$/;"	t	typeref:struct:_PPPOEHDR	file:
PPSDTCPHDR	prototype_a.c	/^} PSDTCPHDR, *PPSDTCPHDR;$/;"	t	typeref:struct:_PSDTCPHDR	file:
PPSDUDPHDR	prototype_a.c	/^} PSDUDPHDR, *PPSDUDPHDR;$/;"	t	typeref:struct:_PSDUDPHDR	file:
PSDTCPHDR	prototype_a.c	/^} PSDTCPHDR, *PPSDTCPHDR;$/;"	t	typeref:struct:_PSDTCPHDR	file:
PSDUDPHDR	prototype_a.c	/^} PSDUDPHDR, *PPSDUDPHDR;$/;"	t	typeref:struct:_PSDUDPHDR	file:
PTCPHDR	prototype_a.c	/^} TCPHDR, *PTCPHDR;$/;"	t	typeref:struct:_TCPHDR	file:
PTCP_HEADER	arp_flood.c	/^}__attribute__((packed))TCP_HEADER, *PTCP_HEADER;$/;"	t	typeref:struct:_TCP_HEADER	file:
PTCP_OPTIONS	arp_flood.c	/^}__attribute__((packed))TCP_OPTIONS, *PTCP_OPTIONS;$/;"	t	typeref:struct:_TCP_OPTIONS	file:
PUDPHDR	prototype_a.c	/^} UDPHDR, *PUDPHDR;$/;"	t	typeref:struct:_UDPHDR	file:
PUDP_HEADER	arp_flood.c	/^}__attribute__((packed))UDP_HEADER, *PUDP_HEADER;$/;"	t	typeref:struct:_UDP_HEADER	file:
PrintData	linux_sockets.c	/^void PrintData (const u_char * data , int Size)$/;"	f
SUCCESS	example_01.c	28;"	d	file:
TCPHDR	prototype_a.c	/^} TCPHDR, *PTCPHDR;$/;"	t	typeref:struct:_TCPHDR	file:
TCP_HEADER	arp_flood.c	/^}__attribute__((packed))TCP_HEADER, *PTCP_HEADER;$/;"	t	typeref:struct:_TCP_HEADER	file:
TCP_HEADER	prototype_b.c	/^}TCP_HEADER;  $/;"	t	typeref:struct:tcphdr	file:
TCP_IP	prototype_b.c	/^}TCP_IP;  $/;"	t	typeref:struct:packet_tcp	file:
TCP_OPTIONS	arp_flood.c	/^}__attribute__((packed))TCP_OPTIONS, *PTCP_OPTIONS;$/;"	t	typeref:struct:_TCP_OPTIONS	file:
TH_ACK	prototype_b.c	141;"	d	file:
TH_FIN	prototype_b.c	137;"	d	file:
TH_PUSH	prototype_b.c	140;"	d	file:
TH_RST	prototype_b.c	139;"	d	file:
TH_SYN	prototype_b.c	138;"	d	file:
TH_URG	prototype_b.c	142;"	d	file:
UDPHDR	prototype_a.c	/^} UDPHDR, *PUDPHDR;$/;"	t	typeref:struct:_UDPHDR	file:
UDP_HEADER	arp_flood.c	/^}__attribute__((packed))UDP_HEADER, *PUDP_HEADER;$/;"	t	typeref:struct:_UDP_HEADER	file:
UDP_HEADER	prototype_b.c	/^}UDP_HEADER;  $/;"	t	typeref:struct:udphdr	file:
UDP_IP	prototype_b.c	/^}UDP_IP;  $/;"	t	typeref:struct:packet_udp	file:
_ARPHDR	arp_flood.c	/^typedef struct _ARPHDR    $/;"	s	file:
_ARPHDR	prototype_a.c	/^typedef struct _ARPHDR    $/;"	s	file:
_DNSHDR	prototype_a.c	/^typedef struct _DNSHDR $/;"	s	file:
_DNSQUERY	prototype_a.c	/^typedef struct _DNSQUERY$/;"	s	file:
_DNSRESPONSE	prototype_a.c	/^typedef struct _DNSRESPONSE$/;"	s	file:
_ETHDR	prototype_a.c	/^typedef struct _ETHDR         $/;"	s	file:
_ICMPHDR	prototype_a.c	/^typedef struct _ICMPHDR$/;"	s	file:
_IPHDR	prototype_a.c	/^typedef struct _IPHDR        $/;"	s	file:
_IP_HEADER	arp_flood.c	/^typedef struct _IP_HEADER$/;"	s	file:
_MAC_FRAME_HEADER	arp_flood.c	/^typedef struct _MAC_FRAME_HEADER$/;"	s	file:
_MAC_FRAME_TAIL	arp_flood.c	/^typedef struct _MAC_FRAME_TAIL$/;"	s	file:
_PPPOEHDR	prototype_a.c	/^typedef struct _PPPOEHDR$/;"	s	file:
_PROTO_H_	prototype_a.c	2;"	d	file:
_PSDTCPHDR	prototype_a.c	/^typedef struct _PSDTCPHDR$/;"	s	file:
_PSDUDPHDR	prototype_a.c	/^typedef struct _PSDUDPHDR$/;"	s	file:
_TCPHDR	prototype_a.c	/^typedef struct _TCPHDR    $/;"	s	file:
_TCP_HEADER	arp_flood.c	/^typedef struct _TCP_HEADER$/;"	s	file:
_TCP_OPTIONS	arp_flood.c	/^typedef struct _TCP_OPTIONS$/;"	s	file:
_UDPHDR	prototype_a.c	/^typedef struct _UDPHDR$/;"	s	file:
_UDP_HEADER	arp_flood.c	/^typedef struct _UDP_HEADER$/;"	s	file:
_eth_hdr	prototype_b.c	/^typedef struct _eth_hdr  $/;"	s	file:
_icmp_hdr	prototype_b.c	/^typedef struct _icmp_hdr  $/;"	s	file:
_ip_hdr	prototype_b.c	/^typedef struct _ip_hdr  $/;"	s	file:
_tagARP_PACKET	example_01.c	/^typedef struct _tagARP_PACKET{  $/;"	s	file:
_tag_ARP_PACKET	arp_flood.c	/^typedef struct _tag_ARP_PACKET$/;"	s	file:
_tcp_hdr	prototype_b.c	/^typedef struct _tcp_hdr  $/;"	s	file:
_udp_hdr	prototype_b.c	/^typedef struct _udp_hdr  $/;"	s	file:
ack	prototype_a.c	/^    ULONG    ack;                \/\/ 32位确认号$/;"	m	struct:_TCPHDR	file:
ack_no	prototype_b.c	/^    unsigned int ack_no;        \/\/确认号  $/;"	m	struct:_tcp_hdr	file:
addition	prototype_a.c	/^    USHORT addition;$/;"	m	struct:_DNSHDR	file:
addr	prototype_a.c	/^    UINT    addr;        \/\/ 资源数据$/;"	m	struct:_DNSRESPONSE	file:
answers	prototype_a.c	/^    USHORT answers;$/;"	m	struct:_DNSHDR	file:
ar_hln	arp_flood.c	/^	char    ar_hln;                \/\/    硬件地址长度，MAC地址的长度为6$/;"	m	struct:_ARPHDR	file:
ar_hln	prototype_a.c	/^    UCHAR    ar_hln;                \/\/    硬件地址长度，MAC地址的长度为6$/;"	m	struct:_ARPHDR	file:
ar_hln	prototype_b.c	/^    u_char ar_hln;  $/;"	m	struct:arphdr	file:
ar_hln	scanMyMac.c	/^	unsigned char ar_hln;$/;"	m	struct:arppacket	file:
ar_hrd	arp_flood.c	/^	short    ar_hrd;                \/\/    硬件地址类型，以太网中为ARPHRD_ETHER$/;"	m	struct:_ARPHDR	file:
ar_hrd	prototype_a.c	/^    USHORT    ar_hrd;                \/\/    硬件地址类型，以太网中为ARPHRD_ETHER$/;"	m	struct:_ARPHDR	file:
ar_hrd	prototype_b.c	/^    u_short ar_hrd;  $/;"	m	struct:arphdr	file:
ar_hrd	scanMyMac.c	/^	unsigned short int ar_hrd;$/;"	m	struct:arppacket	file:
ar_op	arp_flood.c	/^	short    ar_op;                \/\/    ARP操作代码，ARPOP_REQUEST为请求，ARPOP_REPLY为响应$/;"	m	struct:_ARPHDR	file:
ar_op	prototype_a.c	/^    USHORT    ar_op;                \/\/    ARP操作代码，ARPOP_REQUEST为请求，ARPOP_REPLY为响应$/;"	m	struct:_ARPHDR	file:
ar_op	prototype_b.c	/^    u_short ar_op;  $/;"	m	struct:arphdr	file:
ar_op	scanMyMac.c	/^	unsigned short int ar_op;$/;"	m	struct:arppacket	file:
ar_pln	arp_flood.c	/^	char    ar_pln;                \/\/    协议地址长度，IP地址的长度为4$/;"	m	struct:_ARPHDR	file:
ar_pln	prototype_a.c	/^    UCHAR    ar_pln;                \/\/    协议地址长度，IP地址的长度为4$/;"	m	struct:_ARPHDR	file:
ar_pln	prototype_b.c	/^    u_char ar_pln;  $/;"	m	struct:arphdr	file:
ar_pln	scanMyMac.c	/^	unsigned char ar_pln;$/;"	m	struct:arppacket	file:
ar_pro	arp_flood.c	/^	short    ar_pro;                \/\/  协议地址类型，ETHERTYPE_IP$/;"	m	struct:_ARPHDR	file:
ar_pro	prototype_a.c	/^    USHORT    ar_pro;                \/\/  协议地址类型，ETHERTYPE_IP$/;"	m	struct:_ARPHDR	file:
ar_pro	prototype_b.c	/^    u_short ar_pro;  $/;"	m	struct:arphdr	file:
ar_pro	scanMyMac.c	/^	unsigned short int ar_pro;$/;"	m	struct:arppacket	file:
ar_sha	arp_flood.c	/^	char    ar_sha[ETH_ALEN];    \/\/    源MAC地址$/;"	m	struct:_ARPHDR	file:
ar_sha	prototype_a.c	/^    UCHAR    ar_sha[ETH_ALEN];    \/\/    源MAC地址$/;"	m	struct:_ARPHDR	file:
ar_sha	scanMyMac.c	/^	unsigned char ar_sha[ETH_ALEN];$/;"	m	struct:arppacket	file:
ar_sip	arp_flood.c	/^	long    ar_sip;                \/\/    源IP地址$/;"	m	struct:_ARPHDR	file:
ar_sip	prototype_a.c	/^    ULONG    ar_sip;                \/\/    源IP地址$/;"	m	struct:_ARPHDR	file:
ar_sip	scanMyMac.c	/^	unsigned char ar_sip[4];$/;"	m	struct:arppacket	file:
ar_tha	arp_flood.c	/^	char    ar_tha[ETH_ALEN];    \/\/    目的MAC地址$/;"	m	struct:_ARPHDR	file:
ar_tha	prototype_a.c	/^    UCHAR    ar_tha[ETH_ALEN];    \/\/    目的MAC地址$/;"	m	struct:_ARPHDR	file:
ar_tha	scanMyMac.c	/^	unsigned char ar_tha[ETH_ALEN];$/;"	m	struct:arppacket	file:
ar_tip	arp_flood.c	/^	long    ar_tip;                \/\/    目的IP地址$/;"	m	struct:_ARPHDR	file:
ar_tip	prototype_a.c	/^    ULONG    ar_tip;                \/\/    目的IP地址$/;"	m	struct:_ARPHDR	file:
ar_tip	scanMyMac.c	/^	unsigned char ar_tip[4];$/;"	m	struct:arppacket	file:
arp	arp_flood.c	/^	struct ether_arp arp;$/;"	m	struct:_tag_ARP_PACKET	typeref:struct:_tag_ARP_PACKET::ether_arp	file:
arp	example_01.c	/^	struct ether_arp arp;  $/;"	m	struct:_tagARP_PACKET	typeref:struct:_tagARP_PACKET::ether_arp	file:
arp_hln	prototype_b.c	167;"	d	file:
arp_hrd	prototype_b.c	165;"	d	file:
arp_op	prototype_b.c	169;"	d	file:
arp_packet_callback	scanMyMac.c	/^void arp_packet_callback(char * packet_content)$/;"	f
arp_pln	prototype_b.c	168;"	d	file:
arp_pro	prototype_b.c	166;"	d	file:
arp_sha	prototype_b.c	/^    u_char arp_sha[ETHER_ADDR_LEN];  $/;"	m	struct:ether_arp	file:
arp_spa	prototype_b.c	/^    u_char arp_spa[4];  $/;"	m	struct:ether_arp	file:
arp_tha	prototype_b.c	/^    u_char arp_tha[ETHER_ADDR_LEN];  $/;"	m	struct:ether_arp	file:
arp_tpa	prototype_b.c	/^    u_char arp_tpa[4];  $/;"	m	struct:ether_arp	file:
arphdr	prototype_b.c	/^typedef struct arphdr  $/;"	s	file:
arppacket	scanMyMac.c	/^struct arppacket$/;"	s	file:
attack	tcp_flood.c	/^void attack(int fkfd, struct sockaddr_in *target,unsigned short srcport)$/;"	f
author	prototype_a.c	/^    USHORT author;$/;"	m	struct:_DNSHDR	file:
check_sum	tcp_flood.c	/^unsigned short check_sum(unsigned short *addr,int len){$/;"	f
checksum	prototype_a.c	/^    USHORT    checksum;            \/\/ 16位校验和$/;"	m	struct:_TCPHDR	file:
checksum	prototype_a.c	/^    USHORT    checksum;            \/\/ 校验和$/;"	m	struct:_IPHDR	file:
checksum	prototype_a.c	/^    USHORT    checksum;            \/\/ 校验和$/;"	m	struct:_UDPHDR	file:
checksum	prototype_a.c	/^    USHORT  checksum;            \/\/校验和$/;"	m	struct:_ICMPHDR	file:
checksum	syn.c	/^unsigned short checksum(unsigned short *buffer, int size){$/;"	f
chk_sum	prototype_b.c	/^    unsigned short chk_sum;     \/\/16位TCP检验和  $/;"	m	struct:_tcp_hdr	file:
chk_sum	prototype_b.c	/^    unsigned short chk_sum;    \/\/16位检验和  $/;"	m	struct:_icmp_hdr	file:
chk_sum	prototype_b.c	/^    unsigned short chk_sum;  \/\/16位udp检验和  $/;"	m	struct:_udp_hdr	file:
chk_sum	prototype_b.c	/^    unsigned short chk_sum;  \/\/检验和  $/;"	m	struct:_ip_hdr	file:
classes	prototype_a.c	/^    USHORT    classes;        \/\/查询类,通常是A类既查询IP地址$/;"	m	struct:_DNSQUERY	file:
classes	prototype_a.c	/^    USHORT    classes;    \/\/ 类型码$/;"	m	struct:_DNSRESPONSE	file:
code	prototype_a.c	/^    UCHAR    code;                \/\/编码$/;"	m	struct:_PPPOEHDR	file:
code	prototype_a.c	/^    UCHAR   code;                \/\/代码$/;"	m	struct:_ICMPHDR	file:
code	prototype_b.c	/^    unsigned char code;        \/\/代码  $/;"	m	struct:_icmp_hdr	file:
daddr	prototype_a.c	/^    ULONG    daddr;                \/\/ 目标IP地址$/;"	m	struct:_IPHDR	file:
daddr	prototype_a.c	/^    ULONG    daddr;$/;"	m	struct:_PSDTCPHDR	file:
daddr	prototype_a.c	/^    ULONG    daddr;$/;"	m	struct:_PSDUDPHDR	file:
data	prototype_b.c	/^    u_char data[MAXDATA];  $/;"	m	struct:packet_tcp	file:
dataoffset	prototype_a.c	/^    UCHAR    dataoffset;            \/\/ 高4位表示数据偏移$/;"	m	struct:_TCPHDR	file:
dest	linux_sockets.c	/^struct sockaddr_in source,dest;$/;"	v	typeref:struct:
dst_ip	example_01.c	/^unsigned char dst_ip[4] = { 192, 168, 8, 138 };    \/\/目标IP地址$/;"	v
dst_mac	example_01.c	/^unsigned char dst_mac[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };    \/\/ARP广播地址$/;"	v
dst_port	prototype_b.c	/^    unsigned short dst_port;    \/\/目的端口号  $/;"	m	struct:_tcp_hdr	file:
dst_port	prototype_b.c	/^    unsigned short dst_port; \/\/目的端口号  $/;"	m	struct:_udp_hdr	file:
dstaddr	prototype_b.c	/^    struct in_addr dstaddr;  \/\/目的IP地址  $/;"	m	struct:_ip_hdr	typeref:struct:_ip_hdr::in_addr	file:
dstmac	prototype_b.c	/^    unsigned char dstmac[6]; \/\/目标mac地址  $/;"	m	struct:_eth_hdr	file:
dstport	prototype_a.c	/^    USHORT    dstport;            \/\/ 16位目的端口号$/;"	m	struct:_TCPHDR	file:
dstport	prototype_a.c	/^    USHORT    dstport;            \/\/ 目的端口号        $/;"	m	struct:_UDPHDR	file:
ea_hdr	prototype_b.c	/^    struct arphdr ea_hdr;  $/;"	m	struct:ether_arp	typeref:struct:ether_arp::arphdr	file:
eh	arp_flood.c	/^	struct ether_header eh;$/;"	m	struct:_tag_ARP_PACKET	typeref:struct:_tag_ARP_PACKET::ether_header	file:
eh	example_01.c	/^	struct ether_header  eh;  $/;"	m	struct:_tagARP_PACKET	typeref:struct:_tagARP_PACKET::ether_header	file:
eh_dst	prototype_a.c	/^    UCHAR    eh_dst[ETH_ALEN];            \/\/ 目的MAC地址$/;"	m	struct:_ETHDR	file:
eh_src	prototype_a.c	/^    UCHAR    eh_src[ETH_ALEN];            \/\/ 源MAC地址$/;"	m	struct:_ETHDR	file:
eh_type	prototype_a.c	/^    USHORT    eh_type;                    \/\/ 下层协议类型，如IP（ETHERTYPE_IP）、ARP（ETHERTYPE_ARP）等$/;"	m	struct:_ETHDR	file:
encapsulate_arp	Example.c	/^void encapsulate_arp( unsigned short ar_op, char *source_mac, char *source_ip, char *dest_mac, char *dest_ip, char *buf )$/;"	f
encapsulate_frame	Example.c	/^void encapsulate_frame( char *dest_mac, char *source_mac, unsigned int type, char *buf )$/;"	f
eth_hdr	prototype_b.c	/^}eth_hdr;  $/;"	t	typeref:struct:_eth_hdr	file:
eth_type	prototype_b.c	/^    unsigned short eth_type; \/\/以太网类型  $/;"	m	struct:_eth_hdr	file:
ether_arp	prototype_b.c	/^typedef struct ether_arp  $/;"	s	file:
ether_dhost	prototype_b.c	/^    u_char ether_dhost[ETHER_ADDR_LEN];  $/;"	m	struct:ether_header	file:
ether_header	prototype_b.c	/^typedef struct ether_header  $/;"	s	file:
ether_shost	prototype_b.c	/^    u_char ether_shost[ETHER_ADDR_LEN];  $/;"	m	struct:ether_header	file:
ether_type	prototype_b.c	/^    u_short ether_type;  $/;"	m	struct:ether_header	file:
flag	prototype_b.c	/^    unsigned char flag:6;       \/\/6位标志   $/;"	m	struct:_tcp_hdr	file:
flag	prototype_b.c	/^    unsigned char flag:6;       \/\/6位标志  $/;"	m	struct:_tcp_hdr	file:
flags	prototype_a.c	/^    UCHAR    flags;                \/\/ 6位标志位$/;"	m	struct:_TCPHDR	file:
flags	prototype_a.c	/^    USHORT flags;$/;"	m	struct:_DNSHDR	file:
frag_and_flags	prototype_a.c	/^    USHORT    frag_and_flags;        \/\/ 标志$/;"	m	struct:_IPHDR	file:
frag_off	prototype_b.c	/^    unsigned short frag_off; \/\/分片偏移  $/;"	m	struct:_ip_hdr	file:
getrandom	syn.c	23;"	d	file:
h_lenver	prototype_a.c	/^    UCHAR    h_lenver;            \/\/ 版本号和头长度（各占4位）$/;"	m	struct:_IPHDR	file:
i	linux_sockets.c	/^int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; $/;"	v
icmp	linux_sockets.c	/^int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; $/;"	v
icmp0	prototype_b.c	/^struct icmp0   $/;"	s	file:
icmp11	prototype_b.c	/^struct icmp11   $/;"	s	file:
icmp3	prototype_b.c	/^struct icmp3   $/;"	s	file:
icmp5	prototype_b.c	/^struct icmp5   $/;"	s	file:
icmp8	prototype_b.c	/^struct icmp8   $/;"	s	file:
icmp_cksum	prototype_b.c	/^    u_short icmp_cksum;  $/;"	m	struct:icmp0	file:
icmp_cksum	prototype_b.c	/^    u_short icmp_cksum;  $/;"	m	struct:icmp11	file:
icmp_cksum	prototype_b.c	/^    u_short icmp_cksum;  $/;"	m	struct:icmp3	file:
icmp_cksum	prototype_b.c	/^    u_short icmp_cksum;  $/;"	m	struct:icmp5	file:
icmp_cksum	prototype_b.c	/^    u_short icmp_cksum;  $/;"	m	struct:icmp8	file:
icmp_code	prototype_b.c	/^    u_char icmp_code; \/\/type sub code(报文类型子码)  $/;"	m	struct:icmp0	file:
icmp_code	prototype_b.c	/^    u_char icmp_code; \/\/type sub code(报文类型子码)  $/;"	m	struct:icmp11	file:
icmp_code	prototype_b.c	/^    u_char icmp_code; \/\/type sub code(报文类型子码)  $/;"	m	struct:icmp5	file:
icmp_code	prototype_b.c	/^    u_char icmp_code; \/\/type sub code(报文类型子码)  $/;"	m	struct:icmp8	file:
icmp_code	prototype_b.c	/^    u_char icmp_code; \/\/type sub code(报文类型子码),例如:0网络原因不能到达,1主机原因不能到达...  $/;"	m	struct:icmp3	file:
icmp_data	prototype_b.c	/^    char icmp_data[1];  $/;"	m	struct:icmp0	file:
icmp_data	prototype_b.c	/^    char icmp_data[1];  $/;"	m	struct:icmp11	file:
icmp_data	prototype_b.c	/^    char icmp_data[1];  $/;"	m	struct:icmp3	file:
icmp_data	prototype_b.c	/^    char icmp_data[1];  $/;"	m	struct:icmp5	file:
icmp_data	prototype_b.c	/^    char icmp_data[1];  $/;"	m	struct:icmp8	file:
icmp_gwaddr	prototype_b.c	/^    struct in_addr icmp_gwaddr;  $/;"	m	struct:icmp5	typeref:struct:icmp5::in_addr	file:
icmp_hdr	prototype_b.c	/^}icmp_hdr;$/;"	t	typeref:struct:_icmp_hdr	file:
icmp_id	prototype_b.c	/^    u_short icmp_id;  $/;"	m	struct:icmp0	file:
icmp_id	prototype_b.c	/^    u_short icmp_id;  $/;"	m	struct:icmp8	file:
icmp_nextmtu	prototype_b.c	/^    u_short icmp_nextmtu;  $/;"	m	struct:icmp3	file:
icmp_pmvoid	prototype_b.c	/^    u_short icmp_pmvoid;  $/;"	m	struct:icmp3	file:
icmp_seq	prototype_b.c	/^    u_short icmp_seq;  $/;"	m	struct:icmp0	file:
icmp_seq	prototype_b.c	/^    u_short icmp_seq;  $/;"	m	struct:icmp8	file:
icmp_type	prototype_b.c	/^    u_char icmp_type; \/\/type of message(报文类型)  $/;"	m	struct:icmp0	file:
icmp_type	prototype_b.c	/^    u_char icmp_type; \/\/type of message(报文类型)  $/;"	m	struct:icmp11	file:
icmp_type	prototype_b.c	/^    u_char icmp_type; \/\/type of message(报文类型)  $/;"	m	struct:icmp3	file:
icmp_type	prototype_b.c	/^    u_char icmp_type; \/\/type of message(报文类型)  $/;"	m	struct:icmp5	file:
icmp_type	prototype_b.c	/^    u_char icmp_type; \/\/type of message(报文类型)  $/;"	m	struct:icmp8	file:
icmp_type	prototype_b.c	/^    unsigned char icmp_type;   \/\/类型  $/;"	m	struct:_icmp_hdr	file:
icmp_void	prototype_b.c	/^    u_int icmp_void;  $/;"	m	struct:icmp11	file:
id	prototype_a.c	/^    USHORT  id;                    \/\/标识符$/;"	m	struct:_ICMPHDR	file:
id	prototype_a.c	/^    USHORT id;$/;"	m	struct:_DNSHDR	file:
id	prototype_b.c	/^    unsigned short id;       \/\/标志  $/;"	m	struct:_ip_hdr	file:
ident	prototype_a.c	/^    USHORT    ident;                \/\/ 封包标识，惟一标识发送的每一个数据报$/;"	m	struct:_IPHDR	file:
igmp	linux_sockets.c	/^int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; $/;"	v
ihl	prototype_b.c	/^    unsigned char ihl:4;     \/\/首部长度  $/;"	m	struct:_ip_hdr	file:
ip	prototype_b.c	/^    struct ip ip;  $/;"	m	struct:packet_tcp	typeref:struct:packet_tcp::ip	file:
ip	prototype_b.c	/^    struct ip ip;  $/;"	m	struct:packet_udp	typeref:struct:packet_udp::ip	file:
ip	prototype_b.c	/^typedef struct ip  $/;"	s	file:
ip_dst	prototype_b.c	/^    struct in_addr ip_dst;  $/;"	m	struct:ip	typeref:struct:ip::in_addr	file:
ip_hdr	prototype_b.c	/^}ip_hdr;  $/;"	t	typeref:struct:_ip_hdr	file:
ip_hl	prototype_b.c	/^    u_int ip_hl:4; \/\/header length(报头长度)  $/;"	m	struct:ip	file:
ip_icmp_packet_callback	scanMyMac.c	/^void ip_icmp_packet_callback(char * packet_content)$/;"	f
ip_id	prototype_b.c	/^    u_short ip_id;  $/;"	m	struct:ip	file:
ip_len	prototype_b.c	/^    u_short ip_len;  $/;"	m	struct:ip	file:
ip_off	prototype_b.c	/^    u_short ip_off;  $/;"	m	struct:ip	file:
ip_p	prototype_b.c	/^    u_char ip_p;  $/;"	m	struct:ip	file:
ip_packet_callback	scanMyMac.c	/^void ip_packet_callback(char * packet_content)$/;"	f
ip_src	prototype_b.c	/^    struct in_addr ip_src;  $/;"	m	struct:ip	typeref:struct:ip::in_addr	file:
ip_str	Example.c	/^void ip_str( char *ip, char *buf )$/;"	f
ip_sum	prototype_b.c	/^    u_short ip_sum;  $/;"	m	struct:ip	file:
ip_tcp_packet_callback	scanMyMac.c	/^void ip_tcp_packet_callback(char * packet_content)$/;"	f
ip_tos	prototype_b.c	/^    u_char ip_tos;  $/;"	m	struct:ip	file:
ip_ttl	prototype_b.c	/^    u_char ip_ttl;  $/;"	m	struct:ip	file:
ip_udp_packet_callback	scanMyMac.c	/^void ip_udp_packet_callback(char * packet_content)$/;"	f
ip_v	prototype_b.c	/^    u_int ip_v:4; \/\/version(版本)  $/;"	m	struct:ip	file:
j	linux_sockets.c	/^int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; $/;"	v
len	prototype_a.c	/^    USHORT    len;                \/\/ 封包长度$/;"	m	struct:_UDPHDR	file:
len	prototype_a.c	/^    USHORT    len;                \/\/长度$/;"	m	struct:_PPPOEHDR	file:
length	prototype_a.c	/^    USHORT    length;        \/\/ 资源数据长度$/;"	m	struct:_DNSRESPONSE	file:
logfile	linux_sockets.c	/^FILE *logfile;$/;"	v
m_cContext	arp_flood.c	/^	char m_cContext[32];$/;"	m	struct:_TCP_OPTIONS	file:
m_cDstMacAddress	arp_flood.c	/^	unsigned char m_cDstMacAddress[6];	\/\/目的mac地址 a8:15:4d:1f:7d:68$/;"	m	struct:_MAC_FRAME_HEADER	file:
m_cLength	arp_flood.c	/^	char m_cLength;$/;"	m	struct:_TCP_OPTIONS	file:
m_cSrcMacAddress	arp_flood.c	/^	unsigned char m_cSrcMacAddress[6];	\/\/源mac地址 a8:15:4d:1f:7d:68$/;"	m	struct:_MAC_FRAME_HEADER	file:
m_cTTL	arp_flood.c	/^	char m_cTTL;					\/\/存活时间1$/;"	m	struct:_IP_HEADER	file:
m_cType	arp_flood.c	/^	short m_cType;				\/\/上一层协议类型，如0x0800代表上一层是IP协议，0x0806为arp,帧类型，2个字节$/;"	m	struct:_MAC_FRAME_HEADER	file:
m_cTypeOfProtocol	arp_flood.c	/^	char m_cTypeOfProtocol;			\/\/协议类型 ipv4=0800 1$/;"	m	struct:_IP_HEADER	file:
m_cTypeOfService	arp_flood.c	/^	char m_cTypeOfService;			\/\/服务类型1 [0000][0000]$/;"	m	struct:_IP_HEADER	file:
m_cVersionAndHeaderLen	arp_flood.c	/^	char m_cVersionAndHeaderLen;	\/\/版本信息(前4位)，头长度(后4位)[0000],[0000]$/;"	m	struct:_IP_HEADER	file:
m_ckind	arp_flood.c	/^	char m_ckind;$/;"	m	struct:_TCP_OPTIONS	file:
m_sCheckSum	arp_flood.c	/^	short m_sCheckSum;				\/\/ 检验和16bit$/;"	m	struct:_TCP_HEADER	file:
m_sCheckSum	arp_flood.c	/^	short m_sCheckSum;				\/\/校验和2$/;"	m	struct:_IP_HEADER	file:
m_sCheckSum	arp_flood.c	/^	unsigned int m_sCheckSum;	\/\/数据帧尾校验和$/;"	m	struct:_MAC_FRAME_TAIL	file:
m_sDestPort	arp_flood.c	/^	short m_sDestPort;				\/\/ 目的端口号16bit$/;"	m	struct:_TCP_HEADER	file:
m_sHeaderLenAndFlag	arp_flood.c	/^	short m_sHeaderLenAndFlag;		\/\/ 前4位：TCP头长度；中6位：保留；后6位：标志位$/;"	m	struct:_TCP_HEADER	file:
m_sPacketID	arp_flood.c	/^	short m_sPacketID;				\/\/数据包标识2$/;"	m	struct:_IP_HEADER	file:
m_sSliceinfo	arp_flood.c	/^	short m_sSliceinfo;				\/\/分片使用2$/;"	m	struct:_IP_HEADER	file:
m_sSourPort	arp_flood.c	/^	short m_sSourPort;				\/\/ 源端口号16bit$/;"	m	struct:_TCP_HEADER	file:
m_sTotalLenOfPacket	arp_flood.c	/^	short m_sTotalLenOfPacket;		\/\/数据包长度2$/;"	m	struct:_IP_HEADER	file:
m_sWindowSize	arp_flood.c	/^	short m_sWindowSize;			\/\/ 窗口大小16bit$/;"	m	struct:_TCP_HEADER	file:
m_surgentPointer	arp_flood.c	/^	short m_surgentPointer;			\/\/ 紧急数据偏移量16bit$/;"	m	struct:_TCP_HEADER	file:
m_uiAcknowledgeNum	arp_flood.c	/^	unsigned int m_uiAcknowledgeNum;\/\/ 确认号32bit$/;"	m	struct:_TCP_HEADER	file:
m_uiDestIp	arp_flood.c	/^	unsigned int m_uiDestIp;		\/\/目的ip 4bt$/;"	m	struct:_IP_HEADER	file:
m_uiSequNum	arp_flood.c	/^	unsigned int m_uiSequNum;		\/\/ 序列号32bit$/;"	m	struct:_TCP_HEADER	file:
m_uiSourIp	arp_flood.c	/^	unsigned int m_uiSourIp;		\/\/源ip 4bt$/;"	m	struct:_IP_HEADER	file:
m_usCheckSum	arp_flood.c	/^	unsigned short m_usCheckSum;	\/\/ 校验和16bit$/;"	m	struct:_UDP_HEADER	file:
m_usDestPort	arp_flood.c	/^	unsigned short m_usDestPort;	\/\/ 目的端口号16bit$/;"	m	struct:_UDP_HEADER	file:
m_usLength	arp_flood.c	/^	unsigned short m_usLength;		\/\/ 数据包长度16bit$/;"	m	struct:_UDP_HEADER	file:
m_usSourPort	arp_flood.c	/^	unsigned short m_usSourPort;	\/\/ 源端口号16bit$/;"	m	struct:_UDP_HEADER	file:
mac_str	Example.c	/^void mac_str( char *mac, char *buf ) $/;"	f
mac_to_char	arp_flood.c	/^void mac_to_char(char *mac,unsigned char *str){$/;"	f
main	Example.c	/^int main( int argc, char **argv )$/;"	f
main	arp_flood.c	/^int main(int argc,char *argv[])$/;"	f
main	example_01.c	/^int main(int argc, char *argv[])$/;"	f
main	get_all_device.c	/^int main()$/;"	f
main	linux_sockets.c	/^int main()$/;"	f
main	scanMyMac.c	/^int main(int argc, char **argv) {$/;"	f
main	syn.c	/^int main(int argc,char **argv){$/;"	f
main	tcp_flood.c	/^int main(int argc,char** argv){$/;"	f
mbz	prototype_a.c	/^    char    mbz;$/;"	m	struct:_PSDTCPHDR	file:
mbz	prototype_a.c	/^    char    mbz;$/;"	m	struct:_PSDUDPHDR	file:
name	prototype_a.c	/^    USHORT    name;        \/\/ 查询的域名$/;"	m	struct:_DNSRESPONSE	file:
open_packet_socket	Example.c	/^int open_packet_socket( void )$/;"	f
others	linux_sockets.c	/^int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; $/;"	v
packet_tcp	prototype_b.c	/^typedef struct packet_tcp   $/;"	s	file:
packet_udp	prototype_b.c	/^typedef struct packet_udp   $/;"	s	file:
print_arp_header	linux_sockets.c	/^void print_arp_header(const u_char * Buffer, int Size)$/;"	f
print_data	scanMyMac.c	/^void print_data(const u_char * data, int size)$/;"	f
print_ethernet_header	linux_sockets.c	/^void print_ethernet_header(const u_char *Buffer, int Size)$/;"	f
print_icmp_packet	linux_sockets.c	/^void print_icmp_packet(const u_char * Buffer , int Size)$/;"	f
print_ip_header	linux_sockets.c	/^void print_ip_header(const u_char * Buffer, int Size)$/;"	f
print_tcp_packet	linux_sockets.c	/^void print_tcp_packet(const u_char * Buffer, int Size)$/;"	f
print_udp_packet	linux_sockets.c	/^void print_udp_packet(const u_char *Buffer , int Size)$/;"	f
process_packet	linux_sockets.c	/^void process_packet(u_char *args, const struct pcap_pkthdr *header, const u_char *buffer)$/;"	f
protocol	prototype_a.c	/^    UCHAR    protocol;            \/\/ 协议，可能是TCP、UDP、ICMP等$/;"	m	struct:_IPHDR	file:
protocol	prototype_a.c	/^    USHORT    protocol;            \/\/协议$/;"	m	struct:_PPPOEHDR	file:
protocol	prototype_b.c	/^    unsigned char protocol;  \/\/协议  $/;"	m	struct:_ip_hdr	file:
ptcl	prototype_a.c	/^    char    ptcl;$/;"	m	struct:_PSDTCPHDR	file:
ptcl	prototype_a.c	/^    char    ptcl;$/;"	m	struct:_PSDUDPHDR	file:
quests	prototype_a.c	/^    USHORT quests;$/;"	m	struct:_DNSHDR	file:
random_ip	syn.c	/^void random_ip(char *str){$/;"	f
random_port	syn.c	/^unsigned short random_port(unsigned short minport,unsigned short maxport){$/;"	f
recv_arp	example_01.c	/^int recv_arp(int sockfd, struct sockaddr_ll *peer_addr)  $/;"	f
reserved_1	prototype_b.c	/^    unsigned char reserved_1:4; \/\/保留6位中的4位首部长度  $/;"	m	struct:_tcp_hdr	file:
reseverd_2	prototype_b.c	/^    unsigned char reseverd_2:2; \/\/保留6位中的2位  $/;"	m	struct:_tcp_hdr	file:
saddr	prototype_a.c	/^    ULONG    saddr;                \/\/ 源IP地址$/;"	m	struct:_IPHDR	file:
saddr	prototype_a.c	/^    ULONG    saddr;$/;"	m	struct:_PSDTCPHDR	file:
saddr	prototype_a.c	/^    ULONG    saddr;$/;"	m	struct:_PSDUDPHDR	file:
send_arp	example_01.c	/^int send_arp(int sockfd, struct sockaddr_ll *peer_addr)$/;"	f
send_tcp	syn.c	/^void send_tcp(int sockfd,struct sockaddr_in *addr){$/;"	f
seq	prototype_a.c	/^    ULONG    seq;                \/\/ 32位序列号$/;"	m	struct:_TCPHDR	file:
seq_no	prototype_b.c	/^    unsigned int seq_no;        \/\/序列号  $/;"	m	struct:_tcp_hdr	file:
sequence	prototype_a.c	/^    USHORT  sequence;            \/\/序列号$/;"	m	struct:_ICMPHDR	file:
sessionid	prototype_a.c	/^    USHORT    sessionid;            \/\/session id$/;"	m	struct:_PPPOEHDR	file:
set_hw_addr	arp_flood.c	/^void set_hw_addr (char buf[], char *str)$/;"	f
source	linux_sockets.c	/^struct sockaddr_in source,dest;$/;"	v	typeref:struct:sockaddr_in
src_ip	example_01.c	/^unsigned char src_ip[4] = { 192, 168, 8, 138 };    \/\/要检测的主机IP地址$/;"	v
src_mac	example_01.c	/^unsigned char src_mac[6] = {0x00, 0x0c, 0x29, 0x46, 0xb3, 0x50};    \/\/要检测的主机的MAC地址$/;"	v
src_port	prototype_b.c	/^    unsigned short src_port;    \/\/源端口号  $/;"	m	struct:_tcp_hdr	file:
src_port	prototype_b.c	/^    unsigned short src_port; \/\/远端口号  $/;"	m	struct:_udp_hdr	file:
srcaddr	prototype_b.c	/^    struct in_addr srcaddr;  \/\/源IP地址  $/;"	m	struct:_ip_hdr	typeref:struct:_ip_hdr::in_addr	file:
srceport	prototype_a.c	/^    USHORT    srceport;            \/\/ 16位源端口号$/;"	m	struct:_TCPHDR	file:
srcmac	prototype_b.c	/^    unsigned char srcmac[6]; \/\/源mac地址  $/;"	m	struct:_eth_hdr	file:
srcport	prototype_a.c	/^    USHORT    srcport;            \/\/ 源端口号        $/;"	m	struct:_UDPHDR	file:
tcp	linux_sockets.c	/^int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; $/;"	v
tcp	prototype_b.c	/^    struct tcphdr tcp;  $/;"	m	struct:packet_tcp	typeref:struct:packet_tcp::tcphdr	file:
tcp_hdr	prototype_b.c	/^}tcp_hdr;  $/;"	t	typeref:struct:_tcp_hdr	file:
tcphdr	prototype_b.c	/^typedef struct tcphdr   $/;"	s	file:
tcpl	prototype_a.c	/^    USHORT    tcpl;$/;"	m	struct:_PSDTCPHDR	file:
th_ack	prototype_b.c	/^    u_int th_ack;  $/;"	m	struct:tcphdr	file:
th_dport	prototype_b.c	/^    u_short th_dport;  $/;"	m	struct:tcphdr	file:
th_flags	prototype_b.c	/^    u_char th_flags;  $/;"	m	struct:tcphdr	file:
th_off	prototype_b.c	/^    u_int th_off:4;  $/;"	m	struct:tcphdr	file:
th_seq	prototype_b.c	/^    u_int th_seq;  $/;"	m	struct:tcphdr	file:
th_sport	prototype_b.c	/^    u_short th_sport;  $/;"	m	struct:tcphdr	file:
th_sum	prototype_b.c	/^    u_short th_sum;  $/;"	m	struct:tcphdr	file:
th_urp	prototype_b.c	/^    u_short th_urp;  $/;"	m	struct:tcphdr	file:
th_win	prototype_b.c	/^    u_short th_win;  $/;"	m	struct:tcphdr	file:
th_x2	prototype_b.c	/^    u_int th_x2:4;  $/;"	m	struct:tcphdr	file:
thl	prototype_b.c	/^    unsigned char thl:4;        \/\/tcp头部长度  $/;"	m	struct:_tcp_hdr	file:
timestamp	prototype_a.c	/^    ULONG   timestamp;            \/\/时间戳$/;"	m	struct:_ICMPHDR	file:
tos	prototype_a.c	/^    UCHAR    tos;                \/\/ 服务类型 $/;"	m	struct:_IPHDR	file:
tos	prototype_b.c	/^    unsigned char tos;       \/\/服务类型  $/;"	m	struct:_ip_hdr	file:
tot_len	prototype_b.c	/^    unsigned short tot_len;  \/\/总长度  $/;"	m	struct:_ip_hdr	file:
total	linux_sockets.c	/^int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; $/;"	v
total_len	prototype_a.c	/^    USHORT    total_len;            \/\/ 封包总长度，即整个IP报的长度$/;"	m	struct:_IPHDR	file:
ttl	prototype_a.c	/^    UCHAR    ttl;                \/\/ 生存时间，就是TTL$/;"	m	struct:_IPHDR	file:
ttl	prototype_a.c	/^    UINT    ttl;        \/\/ 生存时间$/;"	m	struct:_DNSRESPONSE	file:
ttl	prototype_b.c	/^    unsigned char ttl;       \/\/生存时间  $/;"	m	struct:_ip_hdr	file:
type	prototype_a.c	/^    UCHAR   type;                \/\/类型$/;"	m	struct:_ICMPHDR	file:
type	prototype_a.c	/^    USHORT    type;            \/\/查询类型，大约有20个不同的类型$/;"	m	struct:_DNSQUERY	file:
type	prototype_a.c	/^    USHORT    type;        \/\/ 查询的类型$/;"	m	struct:_DNSRESPONSE	file:
udp	linux_sockets.c	/^int tcp=0,udp=0,icmp=0,others=0,igmp=0,total=0,i,j; $/;"	v
udp	prototype_b.c	/^    struct udphdr udp;  $/;"	m	struct:packet_udp	typeref:struct:packet_udp::udphdr	file:
udp_hdr	prototype_b.c	/^}udp_hdr;  $/;"	t	typeref:struct:_udp_hdr	file:
udphdr	prototype_b.c	/^typedef struct udphdr   $/;"	s	file:
udpl	prototype_a.c	/^    USHORT    udpl;$/;"	m	struct:_PSDUDPHDR	file:
uh_dport	prototype_b.c	/^    u_short uh_dport;  $/;"	m	struct:udphdr	file:
uh_sport	prototype_b.c	/^    u_short uh_sport;  $/;"	m	struct:udphdr	file:
uh_sum	prototype_b.c	/^    u_short uh_sum;  $/;"	m	struct:udphdr	file:
uh_ulen	prototype_b.c	/^    u_short uh_ulen;  $/;"	m	struct:udphdr	file:
uhl	prototype_b.c	/^    unsigned short uhl;      \/\/udp头部长度  $/;"	m	struct:_udp_hdr	file:
urgptr	prototype_a.c	/^    USHORT    urgptr;                \/\/ 16位紧急数据偏移量 $/;"	m	struct:_TCPHDR	file:
urgt_p	prototype_b.c	/^    unsigned short urgt_p;      \/\/16为紧急指针  $/;"	m	struct:_tcp_hdr	file:
ver_type	prototype_a.c	/^    UCHAR    ver_type;            \/\/版本+类型 一般为0x11$/;"	m	struct:_PPPOEHDR	file:
version	prototype_b.c	/^    unsigned char version:4, \/\/版本   $/;"	m	struct:_ip_hdr	file:
window	prototype_a.c	/^    USHORT    window;                \/\/ 16位窗口大小$/;"	m	struct:_TCPHDR	file:
wnd_size	prototype_b.c	/^    unsigned short wnd_size;    \/\/16位窗口大小  $/;"	m	struct:_tcp_hdr	file:
